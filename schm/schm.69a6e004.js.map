{"mappings":"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","sources":["demos/schm/demo.js","demos/schm/style.js","node_modules/ol/source/WMTS.js","node_modules/ol/uri.js","node_modules/ol/tilegrid/WMTS.js","node_modules/@geoblocks/sources/src/Swisstopo.js","demos/schm/shadowtrack.js","demos/schm/swisstopo.js","demos/schm/track.js","node_modules/@geoblocks/proj/src/EPSG_21781.js"],"sourcesContent":["\nimport TrackManager from '../../src/interaction/TrackManager';\nimport GraphHopperRouter from '../../src/router/GraphHopper';\nimport {ExtractFromSegmentProfiler, FallbackProfiler, SwisstopoProfiler} from '../../src/profiler/index';\nimport Profile from '../../src/Profile';\nimport {styleFunction} from './style';\nimport {Style, Circle, Fill} from 'ol/style';\nimport {createMap} from './swisstopo';\nimport {getTrack, getPOIs} from './track';\nimport {click} from 'ol/events/condition';\n\nconst ROUTING_URL = 'https://graphhopper-all.schweizmobil.ch/route?vehicle=schmwander&type=json&weighting=fastest&elevation=true&way_point_max_distance=0&instructions=false&points_encoded=true';\n\n\nasync function main() {\n\n  const {map, trackLayer, shadowTrackLayer} = createMap('map');\n\n  const projection = map.getView().getProjection();\n  const router = new GraphHopperRouter({\n    url: ROUTING_URL,\n    mapProjection: projection\n  });\n\n  const profiler = new FallbackProfiler({\n    profilers: [\n      new ExtractFromSegmentProfiler(),\n      new SwisstopoProfiler({\n        projection: projection\n      })\n    ]\n  });\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent\n   * @param {string} pointType\n   * @return {boolean}\n   */\n  const deleteCondition = function(mapBrowserEvent, pointType) {\n    return click(mapBrowserEvent) && pointType !== 'POI';\n  };\n\n  const trackManager = new TrackManager({\n    map: map,\n    router: router,\n    profiler: profiler,\n    trackLayer: trackLayer,\n    shadowTrackLayer: shadowTrackLayer,\n    style: styleFunction,\n    deleteCondition: deleteCondition,\n  });\n\n  const search = new URLSearchParams(document.location.search);\n  const trackId = search.get('trackId');\n  if (trackId) {\n    trackManager.restoreFeatures([\n      ...await getTrack(trackId, projection),\n      ...await getPOIs(trackId, projection),\n    ]);\n    map.getView().fit(trackLayer.getSource().getExtent(), {\n      padding: [50, 50, 50, 50],\n    });\n  }\n\n  /**\n   * @type {Profile}\n   */\n  const d3Profile = new Profile({\n    map: map,\n    profileTarget: '#profile',\n  });\n\n\n  trackManager.addTrackChangeEventListener(() => {\n    const segments = trackManager.getSegments();\n    d3Profile.refreshProfile(segments);\n  });\n\n  trackManager.addTrackHoverEventListener((distance) => {\n    if (distance !== undefined) {\n      d3Profile.highlight(distance);\n    } else {\n      d3Profile.clearHighlight();\n    }\n  });\n\n  trackManager.mode = 'edit';\n  const tmEl = document.querySelector('#trackmode');\n  tmEl.addEventListener('change', evt => trackManager.mode = evt.target.value);\n\n  document.querySelector('#snap').addEventListener('click', () => {\n    trackManager.snapping = ! trackManager.snapping;\n  });\n  document.querySelector('#delete').addEventListener('click', () => {\n    trackManager.deleteLastPoint();\n  });\n  document.querySelector('#clear').addEventListener('click', () => {\n    trackManager.clear();\n  });\n\n  document.querySelector('#undo').addEventListener('click', () => trackManager.undo());\n  document.querySelector('#redo').addEventListener('click', () => trackManager.redo());\n  document.querySelector('#getTrackData').addEventListener('click', () => {\n    trackManager.getTrackFeature();\n    const features = [\n      ...trackManager.getControlPoints(),\n      ...trackManager.getSegments()\n    ];\n    trackManager.restoreFeatures(features)\n  });\n  document.querySelector('#reverse').addEventListener('click', () => {\n    trackManager.reverse();\n  });\n\n  d3Profile.setTrackHoverStyle(new Style({\n    image: new Circle({\n      fill: new Fill({\n        color: 'blue',\n      }),\n      radius: 9\n    })\n  }));\n}\n\nmain();\n","import { Fill, Stroke, Style, Icon, Text, RegularShape } from \"ol/style\";\nimport { toString } from \"ol/color\";\n\nconst color = [227, 6, 19];\nconst lightColor = [...color, 0.6];\n\nconst poiSvg = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"33\">\n  <path d=\"M10 0C5 0 .5 3 .5 9c0 4 9.5 24 9.5 24s9.5-20 9.5-24c0-6-4.5-9-9.5-9z\" fill=\"${toString(color)}\"/>\n</svg>\n`;\n\nexport const controlPoint = new Style({\n  image: new RegularShape({\n    fill: new Fill({\n      color: lightColor,\n    }),\n    stroke: new Stroke({\n      width: 2,\n      color: color,\n    }),\n    points: 4,\n    radius: 8,\n    angle: Math.PI / 4,\n  }),\n  text: new Text({\n    fill: new Fill({\n      color: \"#fff\",\n    }),\n  }),\n});\n\nexport const sketchControlPoint = controlPoint.clone();\n\nexport const numberedControlPoint = controlPoint.clone();\n\nexport const firstControlPoint = controlPoint.clone();\nfirstControlPoint.getText().setText(\"A\");\n\nexport const lastControlPoint = controlPoint.clone();\nlastControlPoint.getText().setText(\"B\");\n\nexport const poiPoint = new Style({\n  zIndex: 100,\n  image: new Icon({\n    src: `data:image/svg+xml;utf8,${poiSvg}`,\n    // anchor: [0.5, 1]\n  }),\n});\n\nconst sketchLabel = {\n  POI: new Style({\n    text: new Text({\n      font: \"20px sans-serif\",\n      offsetX: 20,\n      textAlign: \"left\",\n      backgroundFill: new Fill({\n        color: \"#ffffffaa\",\n      }),\n      text: \"drag to move POI\",\n    }),\n  }),\n  cp: new Style({\n    text: new Text({\n      font: \"20px sans-serif\",\n      offsetX: 20,\n      textAlign: \"left\",\n      backgroundFill: new Fill({\n        color: \"#ffffffaa\",\n      }),\n      text: \"click to delete\\ndrag to move point\",\n    }),\n  }),\n  segment: new Style({\n    text: new Text({\n      backgroundFill: new Fill({\n        color: \"#ffffffaa\",\n      }),\n      offsetX: 20,\n      textAlign: \"left\",\n      font: \"20px sans-serif\",\n      text: \"drag to create point\",\n    }),\n  }),\n};\n\nexport const trackLine = new Style({\n  stroke: new Stroke({\n    color: color,\n    width: 6,\n  }),\n});\n\nexport const trackLineModifying = trackLine.clone();\ntrackLineModifying.getStroke().setColor(lightColor);\ntrackLineModifying.getStroke().setLineDash([1, 12]);\n\n/**\n * @param {import(\"ol/Feature\").FeatureLike} feature\n * @param {number} _\n * @return {?Style}\n */\nexport function styleFunction(feature, _) {\n  const type = feature.get(\"type\");\n  const subtype = feature.get(\"subtype\");\n  const index = feature.get(\"index\");\n\n  switch (type) {\n    case \"sketch\": {\n      if (subtype) {\n        return [sketchControlPoint, sketchLabel[subtype]];\n      }\n      return sketchControlPoint;\n    }\n    case \"POI\":\n      return poiPoint;\n    case \"controlPoint\":\n      switch (subtype) {\n        case \"first\":\n          return firstControlPoint;\n        case \"last\":\n          return lastControlPoint;\n        default:\n          if (index !== undefined) {\n            numberedControlPoint.getText().setText((index + 1).toString());\n            return numberedControlPoint;\n          }\n          return controlPoint;\n      }\n    case \"segment\":\n      switch (subtype) {\n        case \"modifying\":\n          return trackLineModifying;\n        default:\n          return trackLine;\n      }\n    default:\n      return null;\n  }\n}\n","/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {containsExtent} from '../extent.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326'\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/tilegrid/WMTS\n */\n\nimport TileGrid from './TileGrid.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","import olSourceWMTS from 'ol/source/WMTS.js';\nimport olTilegridWMTS from 'ol/tilegrid/WMTS.js';\n\n/**\n * Available resolutions as defined in\n * https://api3.geo.admin.ch/services/sdiservices.html#wmts.\n * @const {!Array<number>}\n */\nexport const RESOLUTIONS = [\n  4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250, 2000, 1750, 1500, 1250, 1000,\n  750, 650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5, 0.25, 0.1,\n];\n\n/**\n * @type {string}\n */\nconst DEFAULT_BASE_URL = 'https://wmts{0-9}.geo.admin.ch';\n\n/**\n * @type {string}\n */\nconst DEFAULT_ATTRIBUTIONS =\n  '&copy; <a href=\"https://www.swisstopo.admin.ch\">swisstopo</a>';\n\n/**\n * The matrix set is constructed by passing the matrix set defined in the\n * table at https://api3.geo.admin.ch/services/sdiservices.html#wmts.\n * @param {number} level The zoomlevel\n * @return {!Array<string>} matrix set.\n */\nexport const createSwisstopoMatrixSet = function (level) {\n  console.assert(level < RESOLUTIONS.length);\n  const matrixSet = new Array(level);\n  for (let i = 0; i <= level; ++i) {\n    matrixSet[i] = String(i);\n  }\n  return matrixSet;\n};\n\n/**\n * Extents of Swiss projections.\n */\nconst extents = {\n  ['EPSG:2056']: [2420000, 1030000, 2900000, 1350000],\n  ['EPSG:21781']: [420000, 30000, 900000, 350000],\n};\n\n/**\n * Create a Configure tilematrix set 26 (maximum zoomlevel without interpolation).\n * See ch.swisstopo.pixelkarte-farbe from\n * https://wmts10.geo.admin.ch/EPSG/2056/1.0.0/WMTSCapabilities.xml\n * and notes in https://api3.geo.admin.ch/services/sdiservices.html#wmts.\n * @param {string} projection projection\n * @param {number} level The zoomlevel\n * @return {!import('ol/tilegrid/WMTS.js').default} tilegrid\n */\nexport function createTileGrid(projection, level) {\n  return new olTilegridWMTS({\n    extent: extents[projection],\n    resolutions: RESOLUTIONS.slice(0, level + 1),\n    matrixIds: createSwisstopoMatrixSet(level),\n  });\n}\n\n/**\n * @param {string} baseUrl The base url\n * @param {string} projection The projection.\n * @param {string} format The format.\n * @return {string} the url.\n */\nfunction createUrl(baseUrl, projection, format) {\n  if (baseUrl.includes('{Layer}')) {\n    return baseUrl;\n  }\n  let url = `${baseUrl}/1.0.0/{Layer}/default/{Time}`;\n  if (projection === 'EPSG:2056') {\n    url += `/2056/{TileMatrix}/{TileCol}/{TileRow}.${format}`;\n  } else if (projection === 'EPSG:21781') {\n    url += `/21781/{TileMatrix}/{TileRow}/{TileCol}.${format}`;\n  } else {\n    throw new Error(`Unsupported projection ${projection}`);\n  }\n  return url;\n}\n\n/**\n * @typedef {Object} Options\n * @property {string} [baseUrl='https://wmts{0-9}.geo.admin.ch'] WMTS server base url.\n * @property {string} [attributions='...'] Source attributions.\n * @property {string} layer Layer name.\n * @property {string} [format='image/png'] Image format.\n * @property {string} [timestamp='current'] Timestamp.\n * @property {string} projection Projection.\n * @property {number} [level] Max zoom level.\n * @property {string} [crossOrigin='anonymous'] Cross origin.\n */\n\n/**\n * Layer source for the Swisstopo tile server.\n * WARNING: This tile server is not publicly available: you have to be\n *          registered by Swisstopo to use the service.\n * @see https://api3.geo.admin.ch/services/sdiservices.html#wmts\n */\nexport default class SwisstopoSource extends olSourceWMTS {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    const format = options.format || 'image/png';\n    const projection = options.projection;\n    console.assert(projection === 'EPSG:21781' || projection === 'EPSG:2056');\n    const tilegrid = createTileGrid(projection, options.level || 27);\n    const projectionCode = projection.split(':')[1];\n    const extension = format.split('/')[1];\n    console.assert(!!projectionCode);\n    console.assert(!!extension);\n\n    super({\n      attributions: options.attributions || DEFAULT_ATTRIBUTIONS,\n      url: createUrl(\n        options.baseUrl || DEFAULT_BASE_URL,\n        projection,\n        extension\n      ),\n      dimensions: {\n        'Time': options.timestamp || 'current',\n      },\n      projection: projection,\n      requestEncoding: 'REST',\n      layer: options.layer,\n      style: 'default',\n      matrixSet: projectionCode,\n      format: format,\n      tileGrid: tilegrid,\n      crossOrigin: options.crossOrigin || 'anonymous',\n    });\n\n    /**\n     * @const {string}\n     * @private\n     */\n    this.projectionCode_ = projection;\n  }\n\n  getProjectionExtent() {\n    return extents[this.projectionCode_];\n  }\n}\n","import {Style, Stroke} from 'ol/style';\nimport VectorSource from 'ol/source/Vector.js';\nimport VectorLayer from 'ol/layer/Vector.js';\n\n\n/**\n * @type {Style}\n */\n export const style = new Style({\n  stroke: new Stroke({\n    color: '#00cc33aa',\n    width: 6\n  })\n});\n\n/**\n *\n * @return {VectorLayer}\n */\nexport function createShadowLayer() {\n  const source = new VectorSource();\n  const layer = new VectorLayer({source, style});\n  return layer;\n}\n","import SwisstopoSource from '@geoblocks/sources/src/Swisstopo';\nimport EPSG_2056, {proj as proj2056} from '@geoblocks/proj/src/EPSG_2056';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport {View, Map as OLMap} from 'ol';\n\nimport {styleFunction} from './style';\nimport {createShadowLayer} from './shadowtrack';\n\nconst RESOLUTIONS = [650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1];\n\n\nfunction createSwisstopoLayer(layer, format = 'image/jpeg') {\n  const swisstopoLayer = new SwisstopoSource({\n    layer,\n    format,\n    timestamp: 'current',\n    projection: EPSG_2056,\n    crossOrigin: 'anonymous'\n  });\n  return new TileLayer({source: swisstopoLayer});\n}\n\nexport function createMap(target) {\n  const trackSource = new VectorSource();\n  const trackLayer = new VectorLayer({\n    source: trackSource,\n    style: styleFunction,\n  });\n\n  const extent = proj2056.getExtent();\n  const view = new View({\n    projection: EPSG_2056,\n    resolutions: RESOLUTIONS,\n    extent: extent,\n    center: [2532661.0, 1151654.0],\n    zoom: 10,\n  });\n\n  const bgLayer = createSwisstopoLayer('ch.swisstopo.pixelkarte-farbe');\n\n  const shadowTrackLayer = createShadowLayer();\n  const map = new OLMap({\n    target,\n    view,\n    layers: [\n      bgLayer,\n      shadowTrackLayer,\n      trackLayer\n    ]\n  });\n  window['mymap'] = map;\n\n  return {map, trackLayer, shadowTrackLayer};\n}\n","import { equals } from \"ol/coordinate\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport Feature from \"ol/Feature\";\nimport { LineString, Point } from \"ol/geom\";\nimport { proj as proj21781 } from \"@geoblocks/proj/src/EPSG_21781\";\n\nconst geojson = new GeoJSON();\n\nfunction coordinateIndex(coordinates, coordinate) {\n  return coordinates.findIndex((c) => equals(c, coordinate));\n}\n\nexport async function getTrack(id, projection) {\n  const response = await fetch(`https://map.veloland.ch/api/4/tracks/${id}`);\n  const track = geojson.readFeature(await response.json());\n\n  const viaPoints = JSON.parse(track.get(\"via_points\"));\n  console.assert(viaPoints.length >= 2);\n  const coordinates = track.getGeometry().getCoordinates();\n  const features = viaPoints.map((viaPoint, index) => {\n    return new Feature({\n      geometry: new Point(viaPoint).transform(proj21781, projection),\n      type: \"controlPoint\",\n      snapped: true,\n      index: index,\n    });\n  });\n  features.at(0).set(\"subtype\", \"first\");\n  features.at(-1).set(\"subtype\", \"last\");\n  for (let i = 0; i < viaPoints.length - 1; i++) {\n    const indexFrom = coordinateIndex(coordinates, viaPoints[i]);\n    const indexTo = coordinateIndex(coordinates, viaPoints[i + 1]);\n    features.push(\n      new Feature({\n        geometry: new LineString(\n          coordinates.slice(indexFrom, indexTo)\n        ).transform(proj21781, projection),\n        type: \"segment\",\n        snapped: true,\n      })\n    );\n  }\n  return features;\n}\n\nexport async function getPOIs(id, projection) {\n  const response = await fetch(\n    `https://map.veloland.ch/api/4/tracks/${id}/pois`\n  );\n  const pois = geojson.readFeatures(await response.json());\n  return pois.map((poi) => {\n    poi.getGeometry().transform(proj21781, projection);\n    poi.set(\"type\", \"POI\");\n    return poi;\n  });\n}\n","import somerc from './somerc.js';\nimport {create} from './utils.js';\n\nexport const code = 'EPSG:21781';\n\nconst def = `\n  +proj=${somerc}\n  +lat_0=46.95240555555556\n  +lon_0=7.439583333333333\n  +k_0=1\n  +x_0=600000\n  +y_0=200000\n  +ellps=bessel\n  +towgs84=674.374,15.056,405.346,0,0,0,0\n  +units=m\n  +no_defs\n`;\nconst extent = [420000, 30000, 900000, 350000];\n\nexport const proj = create(code, def, extent);\n\nexport default code;\n"],"names":["$jzg1d","parcelRequire","$cJntk","$deb0fdd4a2f55353$var$color","$deb0fdd4a2f55353$var$lightColor","$deb0fdd4a2f55353$var$poiSvg","$4iSHH","toString","$deb0fdd4a2f55353$export$2a1ff327cdfb37bb","$c3RIb","default","image","$5ndKB","fill","$inIMS","color","stroke","$lrKvI","width","points","radius","angle","Math","PI","text","$deb0fdd4a2f55353$export$94f5fec2c43858fd","clone","$deb0fdd4a2f55353$export$943cc3c4e3ff98b4","$deb0fdd4a2f55353$export$9666d3d1050f050a","getText","setText","$deb0fdd4a2f55353$export$c6d39198c6830d0e","$deb0fdd4a2f55353$export$648bc2796ad58832","zIndex","$bmHVE","src","$deb0fdd4a2f55353$var$sketchLabel","POI","font","offsetX","textAlign","backgroundFill","cp","segment","$deb0fdd4a2f55353$export$14cdcf3774420a98","$deb0fdd4a2f55353$export$187021f76968a73a","$deb0fdd4a2f55353$export$8b4cd039ebcc4f7b","feature","_","type","get","subtype","index","undefined","getStroke","setColor","setLineDash","$71uyY","$60db182c0252e220$export$c202e3cb8db99a95","uri","params","keyParams","Object","keys","forEach","k","push","encodeURIComponent","qs","join","replace","includes","$g5oyO","$17e2c305e5143e39$var$WMTSTileGrid","constructor","options","super","extent","origin","origins","resolutions","tileSize","tileSizes","sizes","this","matrixIds_","matrixIds","getMatrixId","z","getMatrixIds","$17e2c305e5143e39$export$2e2bcd8739ae039","$03da246cb7c9d812$var$WMTS","requestEncoding","tileGrid","urls","url","$cwqvp","expandUrl","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","matrixSet","style_","style","requestEncoding_","setKey","getKeyForDimensions_","length","tileUrlFunction","createFromTileUrlFunctions","map","createFromWMTSTemplate","bind","setUrls","key","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","res","slice","updateDimensions","assign","template","context","tilematrixset","Service","Request","Version","Format","m","p","toLowerCase","tileCoord","pixelRatio","localContext","TileMatrix","TileCol","TileRow","$03da246cb7c9d812$export$2e2bcd8739ae039","$9b8ced1f06873e0d$export$6ca86169e9c2a79e","$9b8ced1f06873e0d$export$1c016c74ffac811b","level","console","assert","Array","i","String","$9b8ced1f06873e0d$var$extents","$9b8ced1f06873e0d$var$createUrl","baseUrl","Error","$9b8ced1f06873e0d$export$2e2bcd8739ae039","tilegrid","$9b8ced1f06873e0d$export$32506e3598024e5f","projectionCode","split","extension","Time","timestamp","projectionCode_","getProjectionExtent","$13e293105a41aa21$export$1d567c320f4763bc","$13e293105a41aa21$export$97ef5e4c767fd8b7","source","$bnthu","$bdrRp","$3e97c6634b3f6bc3$var$RESOLUTIONS","$3e97c6634b3f6bc3$export$d49c9aa30b771d59","target","trackSource","trackLayer","$9A3Ac","proj","getExtent","view","$9DiKA","center","zoom","bgLayer","swisstopoLayer","$4mWlF","$3e97c6634b3f6bc3$var$createSwisstopoLayer","shadowTrackLayer","$5DwXE","layers","window","$2o3CH","$k3TIJ","$0759dd825199735a$export$6565f9f03506010b","$0759dd825199735a$var$def","$0759dd825199735a$export$c2f8f60eca464df5","$9XCu7","create","$108bd0a901ed00c7$var$geojson","$l7vEP","$108bd0a901ed00c7$var$coordinateIndex","coordinates","coordinate","findIndex","c","equals","async","$108bd0a901ed00c7$export$501c2cfbf6949fac","id","response","fetch","track","readFeature","json","viaPoints","JSON","parse","getGeometry","getCoordinates","features","viaPoint","$dIG9p","geometry","$9vPkX","transform","snapped","at","set","indexFrom","indexTo","$3xcD3","$108bd0a901ed00c7$export$afc11b8fb408dcbb","readFeatures","poi","getView","getProjection","router","$83zT6","mapProjection","profiler","$2h9ct","FallbackProfiler","profilers","ExtractFromSegmentProfiler","SwisstopoProfiler","trackManager","deleteCondition","mapBrowserEvent","pointType","$kqI9g","click","trackId","URLSearchParams","document","location","search","restoreFeatures","fit","getSource","padding","d3Profile","$lW3AJ","profileTarget","addTrackChangeEventListener","segments","getSegments","refreshProfile","addTrackHoverEventListener","distance","highlight","clearHighlight","mode","querySelector","addEventListener","evt","value","snapping","deleteLastPoint","clear","undo","redo","getTrackFeature","getControlPoints","reverse","setTrackHoverStyle","$wnhPR","$32563be186d979eb$var$main"],"version":3,"file":"schm.69a6e004.js.map"}